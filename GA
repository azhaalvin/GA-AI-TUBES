import random


def fungsi_populasi ():
    biner = [1,0]
    results =[]
    for i in range(6):
        individu = random.choices(biner,k=12)
        results.append(individu)
    return results

def fungsi (x1,x2):
     hasil = (4 - 2.1 * (x1 ** 2) + ((x1 ** 4)/3)) * x1**2 + x1 * x2 + (-4 + 4 * x2**2) * x2**2
     return hasil

def rumusKromosom (rmin,rmax,x): #mencari fenotype
    g= 0
    sgm= 0
    for i in range(len(x)):
        n= (i+1)*-1
        g= g + x[i]*2**n
        sgm= sgm+ 2**n
    hasil_fen = rmin+((rmax-rmin)/sgm)*g 
    return hasil_fen

def carifendanfit (x): #pemecahan idnividu menjadi kromosom ,hasil output list yang berisi fittnes
    rmin1=-3
    rmax1=3
    rmin2=-2
    rmax2=2
    n=len(x)
    n=(n/2)
    c1=[]
    c2=[]
    f=[]
    for ii in range(len(x)):
        for i in range(len(x[0])):
            if i+1 <= (n):
                c1.append(x[ii][i]) 
            if i+1 > (n):
                c2.append(x[ii][i])
        fen1=rumusKromosom(rmin1,rmax1,c1)
        fen2=rumusKromosom(rmin2,rmax2,c2)
        fittnes=fungsi(fen1,fen2)
        f.append(fittnes)
    return f

def parenting(g): #p = pupulasi,g=genotype menentukan paren yang akan di pakai 
    p = [0,1,2,3,4,5]
    n= 0
    for i in range(len(g)):
        n=g[i]+n
    results = random.choices(p,weights=((g[0]/n),(g[1]/n),(g[2]/n),(g[3]/n),(g[4]/n),(g[5]/n)),k=4)
    return results 

def crossover(po,pa1,pa2):
    x=[]
    for i in range(len(pa1)):
        if i <= po[0]:
            x.append(pa1[i])
        if i > po[0]:
            x.append(pa2[i])
    return x

def anak(pa,cl): # crossover dari orang tua
    cild=[]
    point=[0,1,2,3,4,5,6,7,8,9,10]
    po = random.choices(point)
    print(po)
    cild.append(crossover(po,pa[cl[0]],pa[cl[1]]))
    cild.append(crossover(po,pa[cl[1]],pa[cl[0]]))
    cild.append(crossover(po,pa[cl[2]],pa[cl[3]]))
    cild.append(crossover(po,pa[cl[3]],pa[cl[2]]))
    return cild

def mutasi(cild):
    jml=[0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9]
    for ii in range(len(cild)):
        for i in range(len(cild[ii])):
            a = random.choices(jml)
            if (a[0] <= 0.1) and (cild[ii][i] == 1):
                cild[ii][i] = 0
            if (a[0] <= 0.1) and (cild[ii][i] == 0):
                cild[ii][i] = 1
    return()

def pergantiangen(g1,g2,p,cl):
    ii=0
    i=0
    a1=0
    a2=0
    a3=0
    a4=0
    while(i < len(g1)) and (a1==0):
        if g1[i] < g2[ii]:
            p[i] = cl[ii]
            a1=i
        i += 1
    i=0
    ii += 1
    while(i < len(g1)) and (a2==0):
        if (g1[i] < g2[ii]) and (a1 != i):
            p[i] = cl[ii]
            a2=i
        i += 1
    i=0
    ii += 1
    while(i < len(g1)) and (a3==0):
        if (g1[i] < g2[ii]) and (a1 != i)and (a2 != i):
            p[i] = cl[ii]
            a3=i
        i += 1
    i=0
    ii += 1
    while(i < len(g1)) and (a4==0):
        if (g1[i] < g2[ii]) and (a1 != i)and (a2 != i)and (a3 != i):
            p[i] = cl[ii]
            a4=i
        i += 1

                


#main program

p=fungsi_populasi()
print(p)
print("========")
fitnesP=carifendanfit(p)
#print(fitnes)
print("=========")
pa=parenting(fitnesP)
print(pa)
print("=========")
cild=anak(p,pa)
print(cild)
print("=========")
cild=mutasi(cild)
print(cild)
print("=========")
fitnesC=carifendanfit(cild)
print(fitnesC)
print("=========")
p=pergantiangen(fitnesP,fitnesC,p,cild)
print(p)
print("=========")



